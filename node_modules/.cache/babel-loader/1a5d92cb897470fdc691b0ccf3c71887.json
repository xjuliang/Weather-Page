{"ast":null,"code":"import _toConsumableArray from\"C:\\\\Users\\\\julian\\\\Desktop\\\\Proyectos\\\\Proyectos Terminados\\\\WeatherApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\toConsumableArray.js\";import _slicedToArray from\"C:\\\\Users\\\\julian\\\\Desktop\\\\Proyectos\\\\Proyectos Terminados\\\\WeatherApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";import React,{useState}from\"react\";import\"./App.css\";import Cards from\"./components/Cards.jsx\";import Nav from\"./components/Nav\";import About from\"./components/About.jsx\";import City from\"./components/City.jsx\";import{Route}from\"react-router-dom\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function App(){var KEY=\"7ffde956570e375ee78da00a698760d7\";var _useState=useState([]),_useState2=_slicedToArray(_useState,2),cities=_useState2[0],setNewCity=_useState2[1];function onSearch(city){//Llamado a la API del clima\nfetch(\"https://api.openweathermap.org/data/2.5/weather?q=\".concat(city,\"&appid=\").concat(KEY,\"&units=metric\")).then(function(r){return r.json();}).then(function(recurso){if(recurso.main!==undefined){var _city={min:Math.round(recurso.main.temp_min),max:Math.round(recurso.main.temp_max),img:recurso.weather[0].icon,id:recurso.id,wind:recurso.wind.speed,temp:recurso.main.temp,name:recurso.name,weather:recurso.weather[0].main,clouds:recurso.clouds.all,latitud:recurso.coord.lat,longitud:recurso.coord.lon};setNewCity(function(prevCities){return[].concat(_toConsumableArray(prevCities),[_city]);});}else{alert(\"Ciudad no encontrada\");}});}var onClose=function onClose(id){setNewCity(function(prevCities){return prevCities.filter(function(c){return c.id!==id;});});};var onFilter=function onFilter(id){var city=cities.filter(function(c){return c.id===parseInt(id);});if(city.length>0){return city[0];}else{return null;}};return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(Route,{path:\"/\",render:function render(){return/*#__PURE__*/_jsx(Nav,{onSearch:onSearch});}}),/*#__PURE__*/_jsx(Route,{exact:true,path:\"/\",render:function render(){return/*#__PURE__*/_jsx(Cards,{cities:cities,onClose:onClose});}}),/*#__PURE__*/_jsx(Route,{exact:true,path:\"/about\",render:function render(){return/*#__PURE__*/_jsx(About,{});}}),/*#__PURE__*/_jsx(Route,{exact:true,path:\"/city/:id\",render:function render(_ref){var match=_ref.match;return/*#__PURE__*/_jsx(City,{city:onFilter(match.params.id)});}})]});}export default App;","map":{"version":3,"sources":["C:/Users/julian/Desktop/Proyectos/Proyectos Terminados/WeatherApp/src/App.js"],"names":["React","useState","Cards","Nav","About","City","Route","App","KEY","cities","setNewCity","onSearch","city","fetch","then","r","json","recurso","main","undefined","min","Math","round","temp_min","max","temp_max","img","weather","icon","id","wind","speed","temp","name","clouds","all","latitud","coord","lat","longitud","lon","prevCities","alert","onClose","filter","c","onFilter","parseInt","length","match","params"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nimport \"./App.css\";\r\nimport Cards from \"./components/Cards.jsx\";\r\nimport Nav from \"./components/Nav\";\r\n\r\nimport About from \"./components/About.jsx\";\r\nimport City from \"./components/City.jsx\";\r\n\r\nimport { Route } from \"react-router-dom\";\r\n\r\nfunction App() {\r\n  const KEY = \"7ffde956570e375ee78da00a698760d7\";\r\n  const [cities, setNewCity] = useState([]);\r\n\r\n  function onSearch(city) {\r\n    //Llamado a la API del clima\r\n    fetch(\r\n      `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${KEY}&units=metric`\r\n    )\r\n      .then((r) => r.json())\r\n      .then((recurso) => {\r\n        if (recurso.main !== undefined) {\r\n          const city = {\r\n            min: Math.round(recurso.main.temp_min),\r\n            max: Math.round(recurso.main.temp_max),\r\n            img: recurso.weather[0].icon,\r\n            id: recurso.id,\r\n            wind: recurso.wind.speed,\r\n            temp: recurso.main.temp,\r\n            name: recurso.name,\r\n            weather: recurso.weather[0].main,\r\n            clouds: recurso.clouds.all,\r\n            latitud: recurso.coord.lat,\r\n            longitud: recurso.coord.lon,\r\n          };\r\n          setNewCity((prevCities) => [...prevCities, city]);\r\n        } else {\r\n          alert(\"Ciudad no encontrada\");\r\n        }\r\n      });\r\n  }\r\n\r\n  const onClose = (id) => {\r\n    setNewCity((prevCities) => prevCities.filter((c) => c.id !== id));\r\n  };\r\n\r\n  const onFilter = (id) => {\r\n    let city = cities.filter((c) => c.id === parseInt(id));\r\n    if (city.length > 0) {\r\n      return city[0];\r\n    } else {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Route path={\"/\"} render={() => <Nav onSearch={onSearch} />} />\r\n      <Route\r\n        exact\r\n        path={\"/\"}\r\n        render={() => <Cards cities={cities} onClose={onClose} />}\r\n      />\r\n\r\n      <Route exact path={\"/about\"} render={() => <About />} />\r\n\r\n      <Route\r\n        exact\r\n        path={\"/city/:id\"}\r\n        render={({ match }) => <City city={onFilter(match.params.id)} />}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}