{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\julian\\\\Desktop\\\\Proyectos\\\\Proyectos Terminados\\\\WeatherApp\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport Cards from \"./components/Cards.jsx\";\nimport Nav from \"./components/Nav\";\nimport About from \"./components/About.jsx\";\nimport City from \"./components/City.jsx\";\nimport { Route } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const KEY = \"7ffde956570e375ee78da00a698760d7\";\n  const [cities, setNewCity] = useState([]);\n\n  function onSearch(city) {\n    //Llamado a la API del clima\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${KEY}&units=metric`).then(r => r.json()).then(recurso => {\n      if (recurso.main !== undefined) {\n        const city = {\n          min: Math.round(recurso.main.temp_min),\n          max: Math.round(recurso.main.temp_max),\n          img: recurso.weather[0].icon,\n          id: recurso.id,\n          wind: recurso.wind.speed,\n          temp: recurso.main.temp,\n          name: recurso.name,\n          weather: recurso.weather[0].main,\n          clouds: recurso.clouds.all,\n          latitud: recurso.coord.lat,\n          longitud: recurso.coord.lon\n        };\n        setNewCity(prevCities => [...prevCities, city]);\n      } else {\n        alert(\"Ciudad no encontrada\");\n      }\n    });\n  }\n\n  const onClose = id => {\n    setNewCity(prevCities => prevCities.filter(c => c.id !== id));\n  };\n\n  const onFilter = id => {\n    let city = cities.filter(c => c.id === parseInt(id));\n\n    if (city.length > 0) {\n      return city[0];\n    } else {\n      return null;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      path: \"/\",\n      render: () => /*#__PURE__*/_jsxDEV(Nav, {\n        onSearch: onSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 39\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"/\",\n      render: () => /*#__PURE__*/_jsxDEV(Cards, {\n        cities: cities,\n        onClose: onClose\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 23\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"/about\",\n      render: () => /*#__PURE__*/_jsxDEV(About, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 50\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"/city/:id\",\n      render: _ref => {\n        let {\n          match\n        } = _ref;\n        return /*#__PURE__*/_jsxDEV(City, {\n          city: onFilter(match.params.id)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 32\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"6OOdP0yxE7AdI00SRXEwVrt7zj4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/julian/Desktop/Proyectos/Proyectos Terminados/WeatherApp/src/App.js"],"names":["React","useState","Cards","Nav","About","City","Route","App","KEY","cities","setNewCity","onSearch","city","fetch","then","r","json","recurso","main","undefined","min","Math","round","temp_min","max","temp_max","img","weather","icon","id","wind","speed","temp","name","clouds","all","latitud","coord","lat","longitud","lon","prevCities","alert","onClose","filter","c","onFilter","parseInt","length","match","params"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nimport \"./App.css\";\r\nimport Cards from \"./components/Cards.jsx\";\r\nimport Nav from \"./components/Nav\";\r\n\r\nimport About from \"./components/About.jsx\";\r\nimport City from \"./components/City.jsx\";\r\n\r\nimport { Route } from \"react-router-dom\";\r\n\r\nfunction App() {\r\n  const KEY = \"7ffde956570e375ee78da00a698760d7\";\r\n  const [cities, setNewCity] = useState([]);\r\n\r\n  function onSearch(city) {\r\n    //Llamado a la API del clima\r\n    fetch(\r\n      `http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${KEY}&units=metric`\r\n    )\r\n      .then((r) => r.json())\r\n      .then((recurso) => {\r\n        if (recurso.main !== undefined) {\r\n          const city = {\r\n            min: Math.round(recurso.main.temp_min),\r\n            max: Math.round(recurso.main.temp_max),\r\n            img: recurso.weather[0].icon,\r\n            id: recurso.id,\r\n            wind: recurso.wind.speed,\r\n            temp: recurso.main.temp,\r\n            name: recurso.name,\r\n            weather: recurso.weather[0].main,\r\n            clouds: recurso.clouds.all,\r\n            latitud: recurso.coord.lat,\r\n            longitud: recurso.coord.lon,\r\n          };\r\n          setNewCity((prevCities) => [...prevCities, city]);\r\n        } else {\r\n          alert(\"Ciudad no encontrada\");\r\n        }\r\n      });\r\n  }\r\n\r\n  const onClose = (id) => {\r\n    setNewCity((prevCities) => prevCities.filter((c) => c.id !== id));\r\n  };\r\n\r\n  const onFilter = (id) => {\r\n    let city = cities.filter((c) => c.id === parseInt(id));\r\n    if (city.length > 0) {\r\n      return city[0];\r\n    } else {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Route path={\"/\"} render={() => <Nav onSearch={onSearch} />} />\r\n      <Route\r\n        exact\r\n        path={\"/\"}\r\n        render={() => <Cards cities={cities} onClose={onClose} />}\r\n      />\r\n\r\n      <Route exact path={\"/about\"} render={() => <About />} />\r\n\r\n      <Route\r\n        exact\r\n        path={\"/city/:id\"}\r\n        render={({ match }) => <City city={onFilter(match.params.id)} />}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}